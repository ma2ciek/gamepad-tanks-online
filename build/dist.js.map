{"version":3,"sources":["PadManager.ts","PadController.ts","ActionTree.ts","TreeNode.ts","ps4.ts","utils.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["import PadController from './PadController';\n\ninterface IPadManagerSettings {\n    automaticGamepadScanning: boolean;\n}\n\nconst defaultPadManagerSettings: IPadManagerSettings = {\n    automaticGamepadScanning: true,\n};\n\nclass PadManager {\n    private controllers: PadController[];\n    private settings: IPadManagerSettings;\n\n    constructor(settings?: Partial<IPadManagerSettings>) {\n        this.controllers = [];\n        this.settings = { ...defaultPadManagerSettings, ...settings };\n\n        if (this.settings.automaticGamepadScanning) {\n            window.setInterval(() => this.updateGamepads(), 500);\n        }\n    }\n\n    public updateGamepads() {\n        Array.from(navigator.getGamepads()).forEach((gamePad, index) => {\n            if (gamePad && !this.controllers[index]) {\n                this.controllers[index] = new PadController(gamePad);\n            } else if (!gamePad && this.controllers[index]) {\n                this.controllers[index].disconnect();\n                this.controllers[index] = null;\n            }\n        });\n    }\n\n    public getController(index: number) {\n        return this.controllers[index];\n    }\n\n    public getAvailableControllerIndices() {\n        const indices: number[] = [];\n\n        this.controllers.forEach((controller, index) => {\n            if (controller) {\n                indices.push(index);\n            }\n        });\n\n        return indices;\n    }\n}\n","import ActionTree from './ActionTree';\nimport { padJoysticks, padKeys } from './ps4';\nimport { flash } from './utils';\n\ninterface IPadControllerSettings {\n    sequenceMaxPauseTime: number;\n}\n\nconst defaultSettings: IPadControllerSettings = {\n    sequenceMaxPauseTime: 500,\n};\n\nexport default class PadController {\n    private settings: IPadControllerSettings;\n    private actionTree = new ActionTree();\n    private animationFrameId: number;\n    private buttons = flash(this.gamePad.buttons);\n\n    constructor(private gamePad: Gamepad, settings?: Partial<IPadControllerSettings>) {\n        this.settings = { ...defaultSettings, ...settings };\n\n        this.watchButtons();\n    }\n\n    public set(settings: Partial<IPadControllerSettings>) {\n        this.settings = { ...this.settings, ...settings };\n    }\n\n    public onClick(button: number, action: () => void) {\n        this.actionTree.add([button], action);\n    }\n\n    public onSequence(sequence: number[], action: () => void) {\n        this.actionTree.add(sequence, action);\n    }\n\n    public disconnect() {\n        this.removeKeyBinding();\n    }\n\n    private watchButtons() {\n        const keys = Object.keys( padKeys ); // ??\n\n        for (let i = 0; i < 18; i++) {\n            if (this.gamePad.buttons[i].pressed && !this.buttons.data[i].pressed) {\n\n                if (Date.now() - this.buttons.timeStamp > this.settings.sequenceMaxPauseTime) {\n                    this.actionTree.reset();\n                }\n\n                this.actionTree.move(i);\n            }\n        }\n\n        this.buttons = flash(this.gamePad.buttons);\n\n        this.animationFrameId = window.requestAnimationFrame(() => this.watchButtons());\n    }\n\n    private removeKeyBinding() {\n        window.cancelAnimationFrame(this.animationFrameId);\n    }\n}\n","import TreeNode from './TreeNode';\n\nexport default class ActionTree {\n    private root = new TreeNode();\n    private activeNode = this.root;\n\n    public add(sequence: number[], fn: () => void) {\n        let currentNode = this.root;\n\n        for (const buttonIndex of sequence) {\n            if (!currentNode.children[buttonIndex]) {\n                currentNode.children[buttonIndex] = new TreeNode();\n            }\n\n            currentNode = currentNode.children[buttonIndex];\n        }\n\n        currentNode.actions.push(fn);\n    }\n\n    public move(nodeIndex: number) {\n        // TODO\n    }\n\n    public reset() {\n        // TODO\n    }\n}\n","\nexport default class TreeNode {\n    public children: { [buttonIndex: number]: TreeNode };\n\n    public actions: any[];\n}\n","export enum padKeys {\n    TRIANGLE,\n    CIRCLE,\n    SQUARE,\n    CROSS,\n    LEFT = 90,\n    RIGHT,\n    BOTTOM,\n    DOWN,\n    JOYSTICK_LEFT,\n    JOYSTICK_RIGHT,\n}\n\nexport enum padJoysticks {\n    LEFT,\n    RIGHT,\n}\n","export function flash<T>(data: T) {\n    return {\n        data: deepFreeze(deepCopy(data)),\n        timeStamp: Date.now(),\n    };\n}\n\nfunction deepCopy<T>(data: T) {\n    // TODO\n    return data;\n}\n\nfunction deepFreeze<T>(data: T) {\n    // TODO\n    return data;\n}\n"]}